/*
* Copyright (C) 2016 IP Infusion, Inc.
*  All Rights Reserved.
*
*** Auto generated by zebmdc

* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.

* File name : ZebOS.yang
*
*/

module ZebOS {

    namespace   "http://www.ipinfusion.com/CMLSchema/ZebOS";

    prefix "ZebOS";
    include dhcpr;
    include bridge;
    include pim;
    include featuredhcp;
    include mstp;
    include rip;
    include lacp;
    include dhcpc;
    include vr;
    include mlag;
    include radius;
    include auth;
    include rib;
    include plist;
    include igmp;
    include pim4;
    include ospfv3;
    include oambfd;
    include pserv;
    include hqos;
    include snmp;
    include mrib4;
    include vrrp;
    include dns;
    include ldap;
    include vxlan;
    include switchportinterface;
    include tfo;
    include vlan;
    include ntp;
    include lag;
    include telnet;
    include nsmsnmp;
    include libsyslog;
    include vrf;
    include interface;
    include isis;
    include keychain;
    include tacacs;
    include aclinterface;
    include cmm;
    include routemap;
    include aaa;
    include sflow;
    include license;
    include syslog;
    include ospf;
    include acl;
    include bgp;
    include usermgmt;
    include libsnmp;
    include pbb;
    include lldpv2;
    include mcec;
    include igmpsnooping;
    include ssh;


    import cml_data_types {
        prefix cml_data_types;
    }

    organization
        "http://www.ipinfusion.com/CMLSchema";

    contact
        "http://www.ipinfusion.com/CMLSchema";

    description
        "ZebOS Managed Object";


    revision "2017-03-09" {
        description "Changes for acl datamodel.";
    }

    revision "2017-03-05" {
        description "added support for deletion of vlan type.";
    }

    revision "2017-03-03" {
        description "vlaninterface datamodel name has been changed to switchportInterface.";
    }

    revision "2017-02-27" {
        description "added dependentObject for brigdePort.";
    }

    revision "2017-02-25" {
        description "added support for show cml running-config.";
    }

    revision "2017-02-24" {
        description "cliflag added in vlanAccess objectlist.";
    }

    revision "2017-02-23" {
        description "hal statistics attribute added in ifStat container.";
    }

    revision "2017-02-22" {
        description "added bridgeId in bridgePort table, optimising ACL datamodel.";
    }

    revision "2017-02-21" {
        description "private-vlan changes.";
    }

    revision "2017-02-20" {
        description "added run-time attrs in ISIS datamodel.";
    }

    revision "2017-02-14" {
        description "adding missing flag for cli generation.";
    }

    revision "2017-02-13" {
        description "Add the load balance commands.";
    }

    revision "2017-02-11" {
        description "Rip datamodel modifeid.";
    }

    revision "2017-02-10" {
        description "disabling trill bridge creation command.";
    }

    revision "2017-02-08" {
        description "Defect fix for Mcast datamodel.";
    }

    revision "2017-02-07" {
        description "mapped mstp datamodel strcuture with mstpd structure.";
    }

    revision "2017-02-03" {
        description "changes for Mcast datamodel.";
    }

    revision "2017-02-02" {
        description "Defect fixes for isis,pim datamodel.";
    }

    revision "2017-01-31" {
        description "Removed extra attributes from interface datamodel.";
    }

    revision "2017-01-30" {
        description "datamodel adding for HQOS.";
    }

    revision "2017-01-28" {
        description "adding flag for default bridge objectlist in mstp.";
    }

    revision "2017-01-27" {
        description "changes for Debug command.";
    }

    revision "2017-01-25" {
        description "Defect fix in Mcast datamodel.";
    }

    revision "2017-01-23" {
        description "Defect fix in OSPF datamodel.";
    }

    revision "2017-01-20" {
        description "mapped interface datamodel attribute with interface structure.";
    }

    revision "2017-01-19" {
        description "Defect fixes in VRRP datamodel.";
    }

    revision "2017-01-16" {
        description "Ported LDP and RSVP changes from XP-master.";
    }

    revision "2017-01-12" {
        description "auto-populate of default bridge disabled.";
    }

    revision "2017-01-11" {
        description "default bridge command disabled.";
    }

    revision "2017-01-10" {
        description "Defect fixes in OSPF and ISIS datamodel.";
    }

    revision "2017-01-04" {
        description "Changes done to add implicit delete tags.";
    }

    revision "2016-12-30" {
        description "Changes ported from XP-master for vr and vrf.";
    }

    revision "2016-12-29" {
        description "Added support for Routemap SMI auto generation.";
    }

    revision "2016-12-28" {
        description "Added support for Vxlan commands in cmlsh..";
    }

    revision "2016-12-26" {
        description "Added support for LLDPv2 get API.";
    }

    revision "2016-12-22" {
        description "Added support for OSPF SMI auto generation.";
    }

    revision "2016-12-17" {
        description "ISIS redistribute CLI's are changed as per backend CLI's.";
    }

    revision "2016-10-28" {
        description "Top level module includes all ZebOS managed objects.";
    }

    revision "2016-01-29" {
        description "Changes done for ospf getapi and snmp tags.";
    }


    uses dhcprelay-grouping;
    uses dhcprelay6-grouping;
    uses featuredhcp-grouping;
    uses nsmMlag-grouping;
    uses debugdot1x-grouping;
    uses oamMpls-grouping;
    uses pservd-grouping;
    uses snmp-grouping;
    uses VrrpDebug-grouping;
    uses dns-grouping;
    uses ldap-grouping;
    uses tfo-grouping;
    uses ntp-grouping;
    uses lacpSystemPriority-grouping;
    uses lacpdebug-grouping;
    uses telnet-grouping;
    uses nsmsnmp-grouping;
    uses log-grouping;
    uses tacacs-grouping;
    uses cmmGlobals-grouping;
    uses cmmDmm-grouping;
    uses ddmFalseAlarm-grouping;
    uses cmmCpuInfo-grouping;
    uses cmmSysRamTable-grouping;
    uses cmmStackUnitUtilTable-grouping;
    uses cmmSysLedTable-grouping;
    uses cmmSysSwModuleTable-grouping;
    uses cmmAlarmVariable-grouping;
    uses aaa-grouping;
    uses sflow-grouping;
    uses debugsflow-grouping;
    uses hostpsyslog-grouping;
    uses userDebug-grouping;
    uses snmpVrfName-grouping;
    uses mcecMaster-grouping;
    uses igmpConfig-grouping;
    uses ssh-grouping;
    uses dhcprelayinterface-grouping;
    uses dhcp6nterface-grouping;
    uses mstTeBridge-grouping;
    uses backboneBridgePort-grouping;
    uses vr-grouping;
    uses prefixMaster-grouping;
    uses prefixMaster6-grouping;
    uses ospf6_master-grouping;
    uses confModeDebug-grouping;
    uses execModeDebug-grouping;
    uses logginglevel-grouping;
    uses nsmMaster-grouping;
    uses isismaster-grouping;
    uses cmmStackUnitTable-grouping;
    uses cmmSysPowerSupplyTable-grouping;
    uses cmmSysFanTable-grouping;
    uses cmmSysTemperatureTable-grouping;
    uses cmmSysChipTemperatureTable-grouping;
    uses ospfMaster-grouping;
    uses bgpGlobal-grouping;
    uses bgpDebug-grouping;
    uses hashTableSize-grouping;
    uses usermgmt-grouping;
    uses bebBridge-grouping;
    uses lldpMaster-grouping;

    rpc pim-snmp-restart-pim {
    }

    rpc rip-rip-restart {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
            leaf gracePeriod  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
        }
    }

    rpc rip-clear-ip-rip-route {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
            leaf routeCMLSEPtype  {
                type cml_data_types:CML_UINT8_T;
                mandatory true;
            }
        }
    }

    rpc rip-clear-ip-rip-route-prefix {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
            leaf routeCMLSEPtypeCMLSEPpre  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
        }
    }

    rpc rip-clear-ip-rip-route-vrf {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
            leaf vrfName  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
            leaf prefixStr  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
        }
    }

    rpc rip-clear-ip-rip-stat-interf {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
            leaf ifName  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
        }
    }

    rpc rip-snmp-restart-rip {
    }

    rpc auth-snmp-restart {
    }

    rpc rib-clearIpRouteKernel {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
        }
    }

    rpc rib-clearIpKernelRoute {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
        }
    }

    rpc rib-clearIpv6RouteKernel {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
        }
    }

    rpc rib-clearIpRouteAll {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
            leaf starPrint  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
        }
    }

    rpc rib-clearIpRoutePrefix {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
            leaf prefixAddr  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
        }
    }

    rpc rib-clearIpv4RouteAll {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
            leaf starPrint  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
        }
    }

    rpc rib-clearIpv4RoutePrefix {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
            leaf prefixAddr  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
        }
    }

    rpc rib-clearIpv6RouteAll {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
            leaf starPrint  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
        }
    }

    rpc rib-clearIpv6RoutePrefix {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
            leaf prefixIpv6Addr  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
        }
    }

    rpc rib-clearIpVrfRouteAll {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
            leaf vrfName  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
            leaf starPrint  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
        }
    }

    rpc rib-clearIpVrfRoutePrefix {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
            leaf vrfName  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
            leaf prefixAddr  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
        }
    }

    rpc rib-clearIpv4VrfRouteAll {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
            leaf vrfName  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
            leaf starPrint  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
        }
    }

    rpc rib-clearIpv4VrfRoutePrefix {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
            leaf vrfName  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
            leaf prefixAddr  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
        }
    }

    rpc rib-clearIpv6VrdRouteAll {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
            leaf vrfName  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
            leaf starPrint  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
        }
    }

    rpc rib-clearIpv6RoutePrefixVrf {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
            leaf vrfName  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
            leaf prefixIpv6Addr  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
        }
    }

    rpc plist-clear-ip-prefix {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
        }
    }

    rpc plist-clear-ip-prefix-by-name {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
            leaf name  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
        }
    }

    rpc plist-clear-ip-prefix-by-prefix {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
            leaf name  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
            leaf prefix  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
        }
    }

    rpc plist-clear-ipv6-prefix {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
        }
    }

    rpc plist-clear-ipv6-prefix-by-name {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
            leaf name  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
        }
    }

    rpc plist-clear-ipv6-prefix-by-prefix {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
            leaf name  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
            leaf prefix  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
        }
    }

    rpc igmp-mrib4-igmp-group-clear {
        input  {
            leaf vrfName  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
            leaf groupAddr  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
            leaf ifName  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
        }
    }

    rpc igmp-mrib4-igmp-interface-clear {
        input  {
            leaf vrfName  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
            leaf ifName  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
        }
    }

    rpc igmp-mrib4-igmp-vrfName-clear {
        input  {
            leaf vrfName  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
        }
    }

    rpc igmp-mrib4-igmp-all-group-clear {
        input  {
            leaf vrfName  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
            leaf groupAddr  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
        }
    }

    rpc igmp-mrib4-igmp-group-clear-all {
        input  {
            leaf vrfName  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
            leaf clearAll  {
                type cml_data_types:CML_UINT8_T;
                mandatory true;
            }
        }
    }

    rpc pim4-clear-ip-mroute {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
            leaf vrfName  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
            leaf allFlag  {
                type cml_data_types:CML_BOOL_T;
                mandatory true;
            }
            leaf pimmode  {
                type cml_data_types:CML_UINT8_T;
                mandatory true;
            }
        }
    }

    rpc pim4-clear-ip-mroute-xg {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
            leaf vrfName  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
            leaf mrouteXg  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
        }
    }

    rpc pim4-clear-ip-mroute-sg {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
            leaf vrfName  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
            leaf mrouteGaddr  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
            leaf mrouteSaddr  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
            leaf pimgsmode  {
                type cml_data_types:CML_UINT8_T;
                mandatory true;
            }
        }
    }

    rpc pim4-clear-ip-pim {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
            leaf vrfName  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
            leaf allRp  {
                type cml_data_types:CML_BOOL_T;
                mandatory true;
            }
        }
    }

    rpc pim4-clear-ip-msdp-peer {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
            leaf vrfName  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
            leaf peerAddress  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
        }
    }

    rpc pim4-clear-ip-msdp-sacache {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
            leaf vrfName  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
            leaf saAddress  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
        }
    }

    rpc ospfv3-ospf-clear {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
            leaf ospfProcess  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
        }
    }

    rpc ospfv3-ospf-restart-hitless {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
            leaf gracePeriod  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
        }
    }

    rpc ospfv3-ospf-restart {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
            leaf gracePeriod  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
        }
    }

    rpc ospfv3-ospf-snmp-restart {
    }

    rpc mrib4-snmp-restart-mrib {
    }

    rpc mrib4-clear-mrib-vrf-all {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
            leaf vrfName  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
            leaf allroute  {
                type cml_data_types:CML_BOOL_T;
                mandatory true;
            }
        }
    }

    rpc mrib4-clear-mrib-grp {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
            leaf vrfName  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
            leaf grpAddr  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
        }
    }

    rpc mrib4-clear-mrib-vrf-src-grp {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
            leaf vrfName  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
            leaf srcAddr  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
            leaf grpAddr  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
        }
    }

    rpc mrib4-clear-mrib-stats-all {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
            leaf vrfName  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
            leaf allroute  {
                type cml_data_types:CML_BOOL_T;
                mandatory true;
            }
        }
    }

    rpc mrib4-clear-mrib-vrf-grp-stats {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
            leaf vrfName  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
            leaf grpAddr  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
        }
    }

    rpc mrib4-clear-mrib-vrf-src-grp-stats {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
            leaf vrfName  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
            leaf srcAddr  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
            leaf grpAddr  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
        }
    }

    rpc vrrp-snmp-restart-vrrp {
    }

    rpc tfo-cleartfocounter {
    }

    rpc tfo-cleartfocounterfog {
        input  {
            leaf fognum  {
                type cml_data_types:CML_INT32_T;
                mandatory true;
            }
        }
    }

    rpc ntp-sync-retry {
        input  {
            leaf vrf  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
        }
    }

    rpc ntp-clear {
        input  {
            leaf statistics  {
                type cml_data_types:CML_INT32_T;
                mandatory true;
            }
        }
    }

    rpc lag-lacp-snmp-restart {
    }

    rpc libsyslog-cleardebuglogfile {
    }

    rpc libsyslog-clearlogginglogfile {
    }

    rpc interface-clear-arp-cache {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
        }
    }

    rpc interface-clear-ipv6-neighbors {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
        }
    }

    rpc isis-isis-restart {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
            leaf graceCMLSEPperiod  {
                type cml_data_types:CML_UINT16_T;
                mandatory true;
            }
        }
    }

    rpc isis-clear-is-neighbors {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
            leaf SystemID  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
        }
    }

    rpc isis-clear-neighbors {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
        }
    }

    rpc isis-clear-ip-route {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
            leaf isisInstanceTag  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
            leaf ipv4route  {
                type cml_data_types:CML_UINT8_T;
                mandatory true;
            }
        }
    }

    rpc isis-clear-ipv6-route {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
            leaf isisInstanceTag  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
            leaf ipv6route  {
                type cml_data_types:CML_UINT8_T;
                mandatory true;
            }
        }
    }

    rpc isis-isis-proc-clear {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
            leaf isisInstanceTag  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
        }
    }

    rpc isis-isis-clear-counters {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
        }
    }

    rpc isis-clear-interface-counters {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
            leaf ifName  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
        }
    }

    rpc isis-clear-adjacency-all {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
            leaf adjall  {
                type cml_data_types:CML_BOOL_T;
                mandatory true;
            }
            leaf adjvrfname  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
        }
    }

    rpc isis-clear-adjacency-word-all {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
            leaf tagname  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
            leaf adjall  {
                type cml_data_types:CML_BOOL_T;
                mandatory true;
            }
            leaf adjvrfname  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
        }
    }

    rpc isis-clear-adjacency-word-ifname {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
            leaf tagname  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
            leaf tagifname  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
            leaf adjvrfname  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
        }
    }

    rpc isis-clear-adjacency-ifname {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
            leaf adjifname  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
            leaf adjvrfname  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
        }
    }

    rpc isis-clear-adjacency-word-systemid {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
            leaf tagname  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
            leaf tagsystemid  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
            leaf tagvrfname  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
        }
    }

    rpc isis-clear-adjacency-systemid {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
            leaf adjsystemid  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
            leaf adjvrfname  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
        }
    }

    rpc isis-snmp-restart-isis {
    }

    rpc cmm-clear-ddm-transceiver-alarm {
        input  {
            leaf portNum  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
        }
    }

    rpc aaa-lockout {
        input  {
            leaf username  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
        }
    }

    rpc license-licenseget {
        input  {
            leaf sourceCMLSEPinterface  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
            leaf url  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
        }
    }

    rpc license-licenserefresh {
    }

    rpc ospf-restart-ospf-graceful {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
            leaf restartGracePeriod  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
        }
    }

    rpc ospf-restart-ospf-hitless {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
            leaf hitlessGracePeriod  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
        }
    }

    rpc bgp-restartBgp {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
        }
    }

    rpc bgp-clearBgp {
        input  {
            leaf vrId  {
                type cml_data_types:CML_UINT32_T;
                mandatory true;
            }
        }
    }

    rpc mcec-clear-mcec-statistics {
    }

    rpc igmpsnooping-igmpsnooping-clear-interface-group {
        input  {
            leaf groupAddr  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
            leaf ifName  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
        }
    }

    rpc igmpsnooping-igmpsnooping-clear-interface {
        input  {
            leaf ifName  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
        }
    }

    rpc igmpsnooping-igmpsnooping-clear-all {
    }

    rpc igmpsnooping-igmpsnooping-clear {
    }

    rpc igmpsnooping-igmpsnooping-clear-group {
        input  {
            leaf groupAddr  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
        }
    }

    rpc ssh-sshkey {
        input  {
            leaf username  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
            leaf sshkey  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
        }
    }

    rpc ssh-lengthRSA {
        input  {
            leaf usernameRSA  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
            leaf keyRSA  {
                type cml_data_types:CML_BOOL_T;
                mandatory true;
            }
            leaf lengthRSA  {
                type cml_data_types:CML_INT32_T;
                mandatory true;
            }
            leaf forceRSA  {
                type cml_data_types:CML_BOOL_T;
                mandatory true;
            }
        }
    }

    rpc ssh-keyDSA {
        input  {
            leaf usernameDSA  {
                type cml_data_types:CML_STRING_T;
                mandatory true;
            }
            leaf keyDSA  {
                type cml_data_types:CML_BOOL_T;
                mandatory true;
            }
            leaf forceDSA  {
                type cml_data_types:CML_BOOL_T;
                mandatory true;
            }
        }
    }

    notification cmmAlarmCpuRisingThreshold {

        description "Trap to send information for Rising threshold, threshold interval and CPU Utilisation.";

        leaf cmmSysCpuThresholdInterval {
            type string;
        }

        leaf cmmSysCpuThreshold {
            type string;
        }

        leaf cmmStackUnitCpuUtilization {
            type string;
        }
    }

    notification cmmAlarmFreeMemBlwThreshold {

        description "Trap to send information for Free Memory and Free Memory Threshold.";

        leaf cmmSysRamFreeMem {
            type string;
        }

        leaf cmmSysRamThreshold {
            type string;
        }
    }

    notification cmmAlarmTempHigh {

        description "Set when internal temperature exceeds high alarm level.";

        leaf cmmSysPortIndex {
            type string;
        }

        leaf cmmSysPortType {
            type string;
        }

        leaf cmmSysTemperature {
            type string;
        }

        leaf cmmAlarmVarInteger {
            type string;
        }
    }

    notification cmmAlarmTempLow {

        description "Set when internal temperature is below low alarm level.";

        leaf cmmSysPortIndex {
            type string;
        }

        leaf cmmSysPortType {
            type string;
        }

        leaf cmmSysTemperature {
            type string;
        }

        leaf cmmAlarmVarInteger {
            type string;
        }
    }

    notification cmmWarningTempHigh {

        description "Set when internal temperature exceeds high warning level.";

        leaf cmmSysPortIndex {
            type string;
        }

        leaf cmmSysPortType {
            type string;
        }

        leaf cmmSysTemperature {
            type string;
        }

        leaf cmmAlarmVarInteger {
            type string;
        }
    }

    notification cmmWarningTempLow {

        description "Set when internal temperature is below low warning level.";

        leaf cmmSysPortIndex {
            type string;
        }

        leaf cmmSysPortType {
            type string;
        }

        leaf cmmSysTemperature {
            type string;
        }

        leaf cmmAlarmVarInteger {
            type string;
        }
    }

    notification cmmAlarmVoltageHigh {

        description "Set when internal supply voltage exceeds high alarm level.";

        leaf cmmSysPortIndex {
            type string;
        }

        leaf cmmSysPortType {
            type string;
        }

        leaf cmmSysVoltage {
            type string;
        }

        leaf cmmAlarmVarString {
            type string;
        }
    }

    notification cmmAlarmVoltageLow {

        description "Set when internal supply voltage is below low alarm level.";

        leaf cmmSysPortIndex {
            type string;
        }

        leaf cmmSysPortType {
            type string;
        }

        leaf cmmSysVoltage {
            type string;
        }

        leaf cmmAlarmVarString {
            type string;
        }
    }

    notification cmmWarningVoltageHigh {

        description "Set when internal supply voltage exceeds high warning level..";

        leaf cmmSysPortIndex {
            type string;
        }

        leaf cmmSysPortType {
            type string;
        }

        leaf cmmSysVoltage {
            type string;
        }

        leaf cmmAlarmVarString {
            type string;
        }
    }

    notification cmmWarningVoltageLow {

        description "Set when internal supply voltage is below low warning level.";

        leaf cmmSysPortIndex {
            type string;
        }

        leaf cmmSysPortType {
            type string;
        }

        leaf cmmSysVoltage {
            type string;
        }

        leaf cmmAlarmVarString {
            type string;
        }
    }

    notification cmmAlarmBiasHigh {

        description "Set when TX Bias current exceeds high alarm level.";

        leaf cmmSysPortIndex {
            type string;
        }

        leaf cmmSysPortType {
            type string;
        }

        leaf cmmSysLaserBiasCurrent {
            type string;
        }

        leaf cmmAlarmVarString {
            type string;
        }
    }

    notification cmmAlarmBiasLow {

        description "Set when TX Bias current is below low alarm level.";

        leaf cmmSysPortIndex {
            type string;
        }

        leaf cmmSysPortType {
            type string;
        }

        leaf cmmSysLaserBiasCurrent {
            type string;
        }

        leaf cmmAlarmVarString {
            type string;
        }
    }

    notification cmmWarningBiasHigh {

        description "Set when TX Bias current exceeds high warning level.";

        leaf cmmSysPortIndex {
            type string;
        }

        leaf cmmSysPortType {
            type string;
        }

        leaf cmmSysLaserBiasCurrent {
            type string;
        }

        leaf cmmAlarmVarString {
            type string;
        }
    }

    notification cmmWarningBiasLow {

        description "Set when TX Bias current is below low warning level.";

        leaf cmmSysPortIndex {
            type string;
        }

        leaf cmmSysPortType {
            type string;
        }

        leaf cmmSysRxInputPower {
            type string;
        }

        leaf cmmAlarmVarString {
            type string;
        }
    }

    notification cmmAlarmRxPowerHigh {

        description "Set when Received Power exceeds high alarm level.";

        leaf cmmSysPortIndex {
            type string;
        }

        leaf cmmSysPortType {
            type string;
        }

        leaf cmmSysRxInputPower {
            type string;
        }

        leaf cmmAlarmVarString {
            type string;
        }
    }

    notification cmmAlarmRxPowerLow {

        description "Set when Received Power is below low alarm level.";

        leaf cmmSysPortIndex {
            type string;
        }

        leaf cmmSysPortType {
            type string;
        }

        leaf cmmSysRxInputPower {
            type string;
        }

        leaf cmmAlarmVarString {
            type string;
        }
    }

    notification cmmWarningRxPowerHigh {

        description "Set when Received Power exceeds high warning level..";

        leaf cmmSysPortIndex {
            type string;
        }

        leaf cmmSysPortType {
            type string;
        }

        leaf cmmSysRxInputPower {
            type string;
        }

        leaf cmmAlarmVarString {
            type string;
        }
    }

    notification cmmWarningRxPowerLow {

        description "Set when Received Power is below low warning level.";

        leaf cmmSysPortIndex {
            type string;
        }

        leaf cmmSysPortType {
            type string;
        }

        leaf cmmSysRxInputPower {
            type string;
        }

        leaf cmmAlarmVarString {
            type string;
        }
    }

    notification cmmAlarmTemperatureTooHigh {

        description "Set when Temperature will be above threshold for sensor.";

        leaf cmmSysTemperatureSensorIndex {
            type string;
        }

        leaf cmmAlarmVarInteger {
            type string;
        }

        leaf cmmAlarmVarString {
            type string;
        }
    }

    notification cmmWarningPsuInserted {

        description "Set when Power supply unit is inserted.";

        leaf cmmSysPowerSupplyIndex {
            type string;
        }

        leaf cmmAlarmVarString {
            type string;
        }
    }

    notification cmmWarningPsuRemoved {

        description "Set when Power supply unit is Removed.";

        leaf cmmSysPowerSupplyIndex {
            type string;
        }

        leaf cmmAlarmVarString {
            type string;
        }
    }

    notification cmmWarningPsuFaulty {

        description "Set when Power supply unit is Faulty.";

        leaf cmmSysPowerSupplyIndex {
            type string;
        }

        leaf cmmAlarmVarString {
            type string;
        }
    }

    notification cmmWarningFanTrayInserted {

        description "Set when fan tray is inserted.";

        leaf cmmSysFanTrayNumber {
            type string;
        }

        leaf cmmSysFanRpm {
            type string;
        }

        leaf cmmAlarmVarString {
            type string;
        }
    }

    notification cmmWarningFanTrayRemoved {

        description "Set when fan tray is Removed.";

        leaf cmmSysFanTrayNumber {
            type string;
        }

        leaf cmmAlarmVarString {
            type string;
        }
    }

    notification cmmWarningFanTrayFaulty {

        description "Set when Given Fan Tray Faulty.";

        leaf cmmSysFanTrayNumber {
            type string;
        }

        leaf cmmSysFanIndex {
            type string;
        }

        leaf cmmAlarmVarString {
            type string;
        }
    }

    notification cmmWarningFanTrayRecovered {

        description "Set when Given Fan Tray is recovered.";

        leaf cmmSysFanTrayNumber {
            type string;
        }

        leaf cmmSysFanIndex {
            type string;
        }

        leaf cmmAlarmVarString {
            type string;
        }
    }

    notification cmmAlarmPowerExceed {

        description "Set when Power will be above threshold.";

        leaf cmmSysPowerSupplyIndex {
            type string;
        }

        leaf cmmSysPSConsumption {
            type string;
        }

        leaf cmmAlarmVarString {
            type string;
        }
    }

    notification cmmAlarmTxPowerHigh {

        description "Set when Transferred Power exceeds high alarm level.";

        leaf cmmSysPortIndex {
            type string;
        }

        leaf cmmSysPortType {
            type string;
        }

        leaf cmmSysTxOutputPower {
            type string;
        }

        leaf cmmAlarmVarString {
            type string;
        }
    }

    notification cmmAlarmTxPowerLow {

        description "Set when Transferred Power is below low alarm level..";

        leaf cmmSysPortIndex {
            type string;
        }

        leaf cmmSysPortType {
            type string;
        }

        leaf cmmSysTxOutputPower {
            type string;
        }

        leaf cmmAlarmVarString {
            type string;
        }
    }

    notification cmmWarningTxPowerHigh {

        description "Set when Transferred Power exceeds high warning level.";

        leaf cmmSysPortIndex {
            type string;
        }

        leaf cmmSysPortType {
            type string;
        }

        leaf cmmSysTxOutputPower {
            type string;
        }

        leaf cmmAlarmVarString {
            type string;
        }
    }

    notification cmmWarningTxPowerLow {

        description "Set when Transferred Power is below low warning level.";

        leaf cmmSysPortIndex {
            type string;
        }

        leaf cmmSysPortType {
            type string;
        }

        leaf cmmSysTxOutputPower {
            type string;
        }

        leaf cmmAlarmVarString {
            type string;
        }
    }

}