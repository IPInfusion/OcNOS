/*
* Copyright (C) 2016 IP Infusion, Inc.
*  All Rights Reserved.
*
*** Auto generated by zebmdc

* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.

* File name : interface.yang
*
*/

submodule interface {

    belongs-to  ZebOS { prefix ZebOS; }
    include vrf;


    import cml_data_types {
        prefix cml_data_types;
    }

    import feature_list {
        prefix feature_list;
    }

    description
        "Datamodel for interface object";


    revision "2017-02-23" {
        description "hal statistics attribute added in ifStat container.";
    }

    revision "2017-02-13" {
        description "Add the load balance commands.";
    }

    revision "2017-01-28" {
        description "Removed extra attributes from datamodel.";
    }

    revision "2017-01-20" {
        description "mapped attribute name with interface structure.";
    }

    revision "2017-01-12" {
        description "adding speed and description command.";
    }

    revision "2017-01-09" {
        description "adding support for auto udpdate of mtu and speed in DB.";
    }



    grouping interface-grouping {
        list interface {
             
            description
                "interface object";

            config true;
            key "ifName";

            
            leaf ifName  {
                type  cml_data_types:CML_STRING_T {
                    length "1..33";
                }
            } // END of ifName definition.

            leaf origifName  {
                if-feature feature_list:HAVE_INTERFACE_NAME_MAPPING;
                type  cml_data_types:CML_STRING_T {
                    length "1..33";
                }
                config false;
            } // END of origifName definition.

            leaf mappedIfName  {
                type  cml_data_types:CML_STRING_T {
                    length "1..33";
                }
                config false;
            } // END of mappedIfName definition.

            leaf ifIndex  {
                type  cml_data_types:CML_INT32_T;  
                config false;
            } // END of ifIndex definition.

            leaf switchportStatus  {
                type  cml_data_types:CML_BOOL_T;  
                default false;
            } // END of switchportStatus definition.

            leaf shutdownFlag  {
                type  cml_data_types:CML_BOOL_T;  
                default false;
            } // END of shutdownFlag definition.

            leaf multicast  {
                type  cml_data_types:CML_BOOL_T;  
            } // END of multicast definition.

            leaf isRunning  {
                type  cml_data_types:CML_BOOL_T;  
                config false;
            } // END of isRunning definition.

            leaf proxyArp  {
                type  cml_data_types:CML_BOOL_T;  
            } // END of proxyArp definition.

            leaf ifMetric  {
                type  cml_data_types:CML_INT32_T;  
                config false;
            } // END of ifMetric definition.

            leaf mtu  {
                type  cml_data_types:CML_INT32_T {
                     range "64..65536";
                }
                default "1500";
            } // END of mtu definition.

            leaf duplex  {
                type  cml_data_types:CML_DUPLEX_T;  
                default "auto";
            } // END of duplex definition.

            leaf defaultDuplex  {
                type  cml_data_types:CML_UINT8_T;  
                config false;
            } // END of defaultDuplex definition.

            leaf autoNego  {
                type  cml_data_types:CML_INT64_T;  
                config false;
            } // END of autoNego definition.

            leaf defaultAutoNego  {
                type  cml_data_types:CML_UINT8_T;  
                config false;
            } // END of defaultAutoNego definition.

            leaf flowcontrolRcv  {
                type  cml_data_types:CML_FLOWCTRL_T;  
                default "off";
            } // END of flowcontrolRcv definition.

            leaf flowcontrolSend  {
                type  cml_data_types:CML_FLOWCTRL_T;  
                default "off";
            } // END of flowcontrolSend definition.

            leaf autonegBitsAdvt  {
                type  cml_data_types:CML_UINT32_T;  
                config false;
            } // END of autonegBitsAdvt definition.

            leaf autonegFaultAdvt  {
                type  cml_data_types:CML_UINT8_T;  
                config false;
            } // END of autonegFaultAdvt definition.

            leaf mdix  {
                type  cml_data_types:CML_UINT32_T;  
                config false;
            } // END of mdix definition.

            leaf arpAgeingTimeout  {
                type  cml_data_types:CML_UINT32_T {
                     range "1..3000";
                }
                default "3000";
            } // END of arpAgeingTimeout definition.

            leaf slotId  {
                type  cml_data_types:CML_UINT32_T;  
                config false;
            } // END of slotId definition.

            leaf hwType  {
                type  cml_data_types:CML_STRING_T {
                    length "0..255";
                }
                config false;
            } // END of hwType definition.

            leaf hwAddr  {
                type  cml_data_types:CML_STRING_T {
                    length "1..20";
                }
            } // END of hwAddr definition.

            leaf hwAddrLen  {
                type  cml_data_types:CML_INT32_T;  
                config false;
            } // END of hwAddrLen definition.

            leaf speed  {
                type  cml_data_types:CML_STRING_T {
                    length "0..255";
                }
            } // END of speed definition.

            leaf isAutospeed  {
                if-feature feature_list:HAVE_BROADCOM;
                type  cml_data_types:CML_BOOL_T;  
                default false;
            } // END of isAutospeed definition.

            leaf defaultSpeed  {
                type  cml_data_types:CML_STRING_T {
                    length "0..255";
                }
                config false;
                description "interface default link speed, bytes/s";
            } // END of defaultSpeed definition.

            leaf maxSpeed  {
                type  cml_data_types:CML_STRING_T {
                    length "0..255";
                }
                config false;
                description "interface default max link speed, bytes/s";
            } // END of maxSpeed definition.

            leaf bandwidth  {
                if-feature feature_list:HAVE_TE;
                type  cml_data_types:CML_STRING_T {
                    length "0..255";
                }
                default "0";
            } // END of bandwidth definition.

            leaf snmpTrapLinkStatus  {
                type  cml_data_types:CML_BOOL_T;  
                default false;
            } // END of snmpTrapLinkStatus definition.

            leaf fec  {
                type  cml_data_types:CML_UINT8_T;  
                config false;
            } // END of fec definition.

            leaf trapLinkup  {
                if-feature feature_list:HAVE_SNMP_AGENT;
                type  cml_data_types:CML_INT32_T;  
                config false;
            } // END of trapLinkup definition.

            leaf trapLinkdown  {
                if-feature feature_list:HAVE_SNMP_AGENT;
                type  cml_data_types:CML_INT32_T;  
                config false;
            } // END of trapLinkdown definition.

            leaf ifNameAlias  {
                type  cml_data_types:CML_STRING_T {
                    length "1..33";
                }
                config false;
            } // END of ifNameAlias definition.

            leaf bandwidthConfFlags  {
                type  cml_data_types:CML_INT16_T;  
                config false;
                description "Has the bandwidth been configured/read from kernel";
            } // END of bandwidthConfFlags definition.

            leaf description  {
                type  cml_data_types:CML_STRING_T {
                    length "0..255";
                }
            } // END of description definition.

            leaf esi  {
                if-feature feature_list:HAVE_NVO;
                type  cml_data_types:CML_STRING_T {
                    length "0..255";
                }
            } // END of esi definition.

            leaf mauDefaultType  {
                if-feature feature_list:HAVE_L2;
                type  cml_data_types:CML_MAUTYPE_T;  
            } // END of mauDefaultType definition.

            leaf ipDHCPAddr  {
                if-feature feature_list:HAVE_DHCP_CLIENT;
                type  cml_data_types:CML_STRING_T {
                    length "0..255";
                }
                default "NULL";
                config false;
            } // END of ipDHCPAddr definition.

            leaf ipv6DHCPAddr  {
                if-feature feature_list:HAVE_DHCP_CLIENT;
                if-feature feature_list:HAVE_IPV6;
                type  cml_data_types:CML_STRING_T {
                    length "0..255";
                }
                default "NULL";
                config false;
            } // END of ipv6DHCPAddr definition.

            leaf ipAddr  {
                type  cml_data_types:CML_STRING_T {
                    length "0..255";
                }
                default "NULL";
                description "ip address A.B.C.D/M";
            } // END of ipAddr definition.

            leaf prefixlen  {
                type  cml_data_types:CML_UINT8_T;  
            } // END of prefixlen definition.

            leaf ipLabel  {
                type  cml_data_types:CML_STRING_T {
                    length "0..255";
                }
                default "NULL";
                description "ip label";
            } // END of ipLabel definition.

            leaf unnumberedIpv4  {
                if-feature feature_list:HAVE_NSM_IF_UNNUMBERED;
                type  cml_data_types:CML_STRING_T {
                    length "0..255";
                }
            } // END of unnumberedIpv4 definition.

            leaf remoteAddr  {
                if-feature feature_list:HAVE_NSM_IF_UNNUMBERED;
                type  cml_data_types:CML_STRING_T {
                    length "0..255";
                }
            } // END of remoteAddr definition.

            leaf unnumberedIpv6  {
                if-feature feature_list:HAVE_NSM_IF_UNNUMBERED;
                if-feature feature_list:HAVE_IPV6;
                type  cml_data_types:CML_STRING_T {
                    length "0..255";
                }
            } // END of unnumberedIpv6 definition.

            leaf vrfName  {
                if-feature feature_list:HAVE_VRF;
                type  cml_data_types:CML_STRING_T {
                    length "0..255";
                }
            } // END of vrfName definition.

            leaf vrName  {
                if-feature feature_list:HAVE_VR;
                type  cml_data_types:CML_STRING_T {
                    length "0..255";
                }
            } // END of vrName definition.

            leaf loadInterval  {
                type  cml_data_types:CML_UINT16_T;  
                config false;
            } // END of loadInterval definition.

            leaf maxReservableBandwidth  {
                if-feature feature_list:HAVE_TE;
                type  cml_data_types:CML_STRING_T {
                    length "0..255";
                }
                default "0";
            } // END of maxReservableBandwidth definition.

            leaf rdmBwConstraint  {
                if-feature feature_list:HAVE_TE;
                if-feature feature_list:HAVE_DSTE;
                type  cml_data_types:CML_INT64_T;  
                config false;
                description "Bandwidth constraint for RDM per class types(bytes per s)";
            } // END of rdmBwConstraint definition.

            leaf teclPriorityBw  {
                if-feature feature_list:HAVE_TE;
                type  cml_data_types:CML_INT64_T;  
                config false;
                description "Available bandwidth at priority p, 0 <= p < 8";
            } // END of teclPriorityBw definition.

            leaf bindInfo  {
                type  cml_data_types:CML_UINT8_T;  
                config false;
                description "Bind information vrf, mpls_vc, mpls_vc_vlan, vpls, vpls_vlan, vxlan, nvgre";
            } // END of bindInfo definition.

            leaf bcMode  {
                if-feature feature_list:HAVE_DSTE;
                type  cml_data_types:CML_STRING_T {
                    length "0..255";
                }
            } // END of bcMode definition.

            leaf vrxFlag  {
                if-feature feature_list:HAVE_VRX;
                type  cml_data_types:CML_UINT8_T;  
                config false;
            } // END of vrxFlag definition.

            leaf localSrc  {
                if-feature feature_list:HAVE_VRX;
                type  cml_data_types:CML_UINT8_T;  
                config false;
            } // END of localSrc definition.

            leaf ifLastChange  {
                type  cml_data_types:CML_STRING_T {
                    length "0..255";
                }
                config false;
            } // END of ifLastChange definition.

            leaf ifLastFlap  {
                type  cml_data_types:CML_STRING_T {
                    length "0..255";
                }
                config false;
            } // END of ifLastFlap definition.

            leaf ifLastCounterClear  {
                type  cml_data_types:CML_STRING_T {
                    length "0..255";
                }
                config false;
            } // END of ifLastCounterClear definition.

            leaf interfaceType  {
                type  cml_data_types:CML_INTERFACE_TYPE_T;  
                config false;
                description "Interface type L2, L3, TDM";
            } // END of interfaceType definition.

            leaf trustState  {
                if-feature feature_list:HAVE_QOS;
                type  cml_data_types:CML_INT32_T;  
                config false;
            } // END of trustState definition.

            leaf ipv6Status  {
                if-feature feature_list:HAVE_IPV6;
                type  cml_data_types:CML_BOOL_T;  
                config false;
                description "IPv6 capability status";
            } // END of ipv6Status definition.

            leaf ipv6Forwarding  {
                if-feature feature_list:HAVE_IPV6;
                type  cml_data_types:CML_BOOL_T;  
                config false;
            } // END of ipv6Forwarding definition.

            leaf ipv4Status  {
                type  cml_data_types:CML_BOOL_T;  
                config false;
                description "IPv4 capability status";
            } // END of ipv4Status definition.

            leaf mpgIf  {
                if-feature feature_list:HAVE_TFO;
                type  cml_data_types:CML_UINT64_T;  
                config false;
            } // END of mpgIf definition.

            leaf tfoLinkType  {
                if-feature feature_list:HAVE_TFO;
                type  cml_data_types:CML_UINT32_T;  
                config false;
            } // END of tfoLinkType definition.

            leaf udldFlushTx  {
                if-feature feature_list:HAVE_UDLD;
                type  cml_data_types:CML_UINT16_T;  
                config false;
            } // END of udldFlushTx definition.

            leaf macLearnLimit  {
                type  cml_data_types:CML_INT32_T;  
                config false;
            } // END of macLearnLimit definition.

            leaf jitterBuffer  {
                if-feature feature_list:HAVE_TDM_VC;
                type  cml_data_types:CML_UINT16_T {
                     range "1..500";
                }
                default "500";
            } // END of jitterBuffer definition.

            leaf payLoadBytes  {
                if-feature feature_list:HAVE_TDM_VC;
                type  cml_data_types:CML_UINT32_T {
                     range "0..32768";
                }
                default "0";
            } // END of payLoadBytes definition.

            leaf rtpHeader  {
                if-feature feature_list:HAVE_TDM_VC;
                type  cml_data_types:CML_BOOL_T;  
                default false;
            } // END of rtpHeader definition.

            leaf portBreakout  {
                if-feature feature_list:HAVE_FLEXPORT;
                type  cml_data_types:CML_NSM_BREAKOUT_TYPE_T;  
                default "4X10g";
            } // END of portBreakout definition.

            leaf portBundle  {
                if-feature feature_list:HAVE_FLEXPORT;
                type  cml_data_types:CML_BOOL_T;  
                default false;
            } // END of portBundle definition.


            list secondary {
                 
                description
                    "Secondary IPv4 Address";

                config true;
                key "secIpAddr";

                
                leaf secIpAddr  {
                    type  cml_data_types:CML_STRING_T {
                        length "0..255";
                    }
                } // END of secIpAddr definition.

                leaf secondaryFlag  {
                    mandatory true;
                    type  cml_data_types:CML_BOOL_T;  
                } // END of secondaryFlag definition.

                leaf ipLabel  {
                    mandatory true;
                    type  cml_data_types:CML_STRING_T {
                        length "0..255";
                    }
                } // END of ipLabel definition.

            } // End of secondary-list

            list ipv6Addr {
                                 if-feature feature_list:HAVE_IPV6;

                description
                    "IPv6 Address";

                config true;
                key "ipv6Addr";

                
                leaf ipv6Addr  {
                    type  cml_data_types:CML_STRING_T {
                        length "0..255";
                    }
                } // END of ipv6Addr definition.

                leaf anycast  {
                    type  cml_data_types:CML_BOOL_T;  
                    default false;
                } // END of anycast definition.

            } // End of ipv6Addr-list

            list bandwidthConstraint {
                                 if-feature feature_list:HAVE_TE;
                if-feature feature_list:HAVE_DSTE;

                description
                    "Bandwidth constraint per class types (bytes per s)";

                config true;
                key "constraintName";

                
                leaf constraintName  {
                    type  cml_data_types:CML_STRING_T {
                        length "0..255";
                    }
                } // END of constraintName definition.

                leaf bandwidthStr  {
                    mandatory true;
                    if-feature feature_list:HAVE_TE;
                    type  cml_data_types:CML_STRING_T {
                        length "0..255";
                    }
                } // END of bandwidthStr definition.

            } // End of bandwidthConstraint-list

            list errorSet {
                                 if-feature feature_list:HAVE_TDM_VC;

                description
                    "errorSet";

                config true;
                key "errorSetType";

                
                leaf errorSetType  {
                    type  cml_data_types:CML_ERROR_SET_TYPE_T;  
                } // END of errorSetType definition.

                leaf errorSetPeriod  {
                    mandatory true;
                    type  cml_data_types:CML_UINT32_T {
                         range "2000..10000";
                    }
                } // END of errorSetPeriod definition.

            } // End of errorSet-list

            list errorClear {
                                 if-feature feature_list:HAVE_TDM_VC;

                description
                    "errorClear";

                config true;
                key "errorClearType";

                
                leaf errorClearType  {
                    type  cml_data_types:CML_ERROR_CLEAR_TYPE_T;  
                } // END of errorClearType definition.

                leaf errorClearPeriod  {
                    mandatory true;
                    type  cml_data_types:CML_UINT32_T {
                         range "2000..10000";
                    }
                } // END of errorClearPeriod definition.

            } // End of errorClear-list
            container stormControl {
                                config true;

                description
                    "Storm Control Features";

                leaf stormControlSet  {
                    type  cml_data_types:CML_STROM_CTRL_FLAG_T;  
                } // END of stormControlSet definition.

                leaf level  {
                    type  cml_data_types:CML_STRING_T {
                        length "0..255";
                    }
                    default "";
                } // END of level definition.

                leaf fraction  {
                    type  cml_data_types:CML_INT32_T;  
                    config false;
                } // END of fraction definition.

                leaf rateLimitType  {
                    type  cml_data_types:CML_INT32_T;  
                    config false;
                } // END of rateLimitType definition.

            } // END of stormControl-container definition.
            container ifStat {
                                config false;

                description
                    "interface Statistics fields";

                leaf rxPackets  {
                    type  cml_data_types:CML_UINT32_T;  
                } // END of rxPackets definition.

                leaf txPackets  {
                    type  cml_data_types:CML_UINT32_T;  
                } // END of txPackets definition.

                leaf rxbytes  {
                    type  cml_data_types:CML_UINT64_T;  
                } // END of rxbytes definition.

                leaf txbytes  {
                    type  cml_data_types:CML_UINT64_T;  
                } // END of txbytes definition.

                leaf rxerrors  {
                    type  cml_data_types:CML_UINT32_T;  
                } // END of rxerrors definition.

                leaf txerrors  {
                    type  cml_data_types:CML_UINT32_T;  
                } // END of txerrors definition.

                leaf rxdropped  {
                    type  cml_data_types:CML_UINT32_T;  
                } // END of rxdropped definition.

                leaf txdropped  {
                    type  cml_data_types:CML_UINT32_T;  
                } // END of txdropped definition.

                leaf rxmulticast  {
                    type  cml_data_types:CML_UINT32_T;  
                } // END of rxmulticast definition.

                leaf rxcompressed  {
                    type  cml_data_types:CML_UINT32_T;  
                } // END of rxcompressed definition.

                leaf txcompressed  {
                    type  cml_data_types:CML_UINT32_T;  
                } // END of txcompressed definition.

                leaf collisions  {
                    type  cml_data_types:CML_UINT32_T;  
                } // END of collisions definition.

                leaf urpfDropped  {
                    type  cml_data_types:CML_UINT32_T;  
                } // END of urpfDropped definition.

                leaf rxLengthErrors  {
                    type  cml_data_types:CML_UINT32_T;  
                } // END of rxLengthErrors definition.

                leaf rxOverErrors  {
                    type  cml_data_types:CML_UINT32_T;  
                } // END of rxOverErrors definition.

                leaf rxCrcErrors  {
                    type  cml_data_types:CML_UINT32_T;  
                } // END of rxCrcErrors definition.

                leaf rxFrameErrors  {
                    type  cml_data_types:CML_UINT32_T;  
                } // END of rxFrameErrors definition.

                leaf rxFifoErrors  {
                    type  cml_data_types:CML_UINT32_T;  
                } // END of rxFifoErrors definition.

                leaf rxMissedErrors  {
                    type  cml_data_types:CML_UINT32_T;  
                } // END of rxMissedErrors definition.

                leaf txAbortedErrors  {
                    type  cml_data_types:CML_UINT32_T;  
                } // END of txAbortedErrors definition.

                leaf txCarrierErrors  {
                    type  cml_data_types:CML_UINT32_T;  
                } // END of txCarrierErrors definition.

                leaf txFifoErrors  {
                    type  cml_data_types:CML_UINT32_T;  
                } // END of txFifoErrors definition.

                leaf txHeartbeatErrors  {
                    type  cml_data_types:CML_UINT32_T;  
                } // END of txHeartbeatErrors definition.

                leaf txWindowErrors  {
                    type  cml_data_types:CML_UINT32_T;  
                } // END of txWindowErrors definition.

                leaf outErrors  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of outErrors definition.

                leaf outDiscards  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of outDiscards definition.

                leaf outMcPkts  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of outMcPkts definition.

                leaf outUcPkts  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of outUcPkts definition.

                leaf inUcPkts  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of inUcPkts definition.

                leaf inDiscards  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of inDiscards definition.

                leaf goodOctetsRcv  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of goodOctetsRcv definition.

                leaf badOctetsRcv  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of badOctetsRcv definition.

                leaf macTransmitErr  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of macTransmitErr definition.

                leaf goodPktsRcv  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of goodPktsRcv definition.

                leaf badPktsRcv  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of badPktsRcv definition.

                leaf pktsRcv  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of pktsRcv definition.

                leaf brdcPktsRcv  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of brdcPktsRcv definition.

                leaf mcPktsRcv  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of mcPktsRcv definition.

                leaf pkts64OctetsRcv  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of pkts64OctetsRcv definition.

                leaf pkts65127OctetsRcv  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of pkts65127OctetsRcv definition.

                leaf pkts128255OctetsRcv  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of pkts128255OctetsRcv definition.

                leaf pkts256511OctetsRcv  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of pkts256511OctetsRcv definition.

                leaf pkts5121023OctetsRcv  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of pkts5121023OctetsRcv definition.

                leaf pkts10241518OctetsRcv  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of pkts10241518OctetsRcv definition.

                leaf pkts15192047OctetsRcv  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of pkts15192047OctetsRcv definition.

                leaf pkts20484095OctetsRcv  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of pkts20484095OctetsRcv definition.

                leaf pkts40969216OctetsRcv  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of pkts40969216OctetsRcv definition.

                leaf pkts64Octets  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of pkts64Octets definition.

                leaf pkts65127Octets  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of pkts65127Octets definition.

                leaf pkts128255Octets  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of pkts128255Octets definition.

                leaf pkts256511Octets  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of pkts256511Octets definition.

                leaf pkts5121023Octets  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of pkts5121023Octets definition.

                leaf pkts1024maxOctets  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of pkts1024maxOctets definition.

                leaf pkts15192047Octets  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of pkts15192047Octets definition.

                leaf pkts20484095Octets  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of pkts20484095Octets definition.

                leaf pkts40969216Octets  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of pkts40969216Octets definition.

                leaf goodOctetsSent  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of goodOctetsSent definition.

                leaf goodPktsSent  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of goodPktsSent definition.

                leaf excessiveCollisions  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of excessiveCollisions definition.

                leaf mcPktsSent  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of mcPktsSent definition.

                leaf brdcPktsSent  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of brdcPktsSent definition.

                leaf unrecogMacCntrRcv  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of unrecogMacCntrRcv definition.

                leaf fcSent  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of fcSent definition.

                leaf goodFcRcv  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of goodFcRcv definition.

                leaf dropEvents  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of dropEvents definition.

                leaf undersizePkts  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of undersizePkts definition.

                leaf fragmentsPkts  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of fragmentsPkts definition.

                leaf oversizePkts  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of oversizePkts definition.

                leaf jabberPkts  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of jabberPkts definition.

                leaf macRcvRrror  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of macRcvRrror definition.

                leaf macRcvError  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of macRcvError definition.

                leaf badCrc  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of badCrc definition.

                leaf dribble  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of dribble definition.

                leaf collisionsState  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of collisionsState definition.

                leaf lateCollisions  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of lateCollisions definition.

                leaf deferredTx  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of deferredTx definition.

                leaf badFcRcv  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of badFcRcv definition.

                leaf portInoverflowFrames  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of portInoverflowFrames definition.

                leaf portOutOverflowFrames  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of portOutOverflowFrames definition.

                leaf portInOverflowDiscards  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of portInOverflowDiscards definition.

                leaf inFiltered  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of inFiltered definition.

                leaf outFiltered  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of outFiltered definition.

                leaf mtuExceed  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of mtuExceed definition.

                leaf inJumbo  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of inJumbo definition.

                leaf outJumbo  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of outJumbo definition.

                leaf rxPktRate  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of rxPktRate definition.

                leaf rxBitRate  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of rxBitRate definition.

                leaf txPktRate  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of txPktRate definition.

                leaf txBitRate  {
                    if-feature feature_list:HAVE_BROADCOM;
                    if-feature feature_list:HAVE_HAL;
                    type  cml_data_types:CML_UINT64_T;  
                } // END of txBitRate definition.

            } // END of ifStat-container definition.
            container prefixSegment {
                if-feature feature_list:HAVE_SR;
                                config true;

                description
                    "prefix segment";

                leaf sid  {
                    type  cml_data_types:CML_SR_SID_T;  
                } // END of sid definition.

                leaf expNull  {
                    type  cml_data_types:CML_SR_PREFIX_FLAG_T;  
                } // END of expNull definition.

                leaf nFlagClear  {
                    type  cml_data_types:CML_SR_N_FLAG_CLEAR_T;  
                } // END of nFlagClear definition.

            } // END of prefixSegment-container definition.
        } // End of interface-list
    } // END of interface-grouping definition.


    grouping nsmMaster-grouping {
        list nsmMaster {
             
            description
                "Global configs for router";

            config true;
            key "vrId";

            
            leaf vrId  {
                type  cml_data_types:CML_UINT32_T;  
            } // END of vrId definition.

            leaf routerId  {
                type  cml_data_types:CML_STRING_T {
                    length "0..255";
                }
            } // END of routerId definition.

            leaf filterType  {
                type  cml_data_types:CML_QOS_FILTER_TYPE_T;  
            } // END of filterType definition.

            leaf qosType  {
                type  cml_data_types:CML_ENABLE_DISABLE_T;  
            } // END of qosType definition.

            leaf enableIpForwarding  {
                type  cml_data_types:CML_BOOL_T;  
            } // END of enableIpForwarding definition.

            leaf enableIpv6Forwarding  {
                if-feature feature_list:HAVE_IPV6;
                type  cml_data_types:CML_BOOL_T;  
            } // END of enableIpv6Forwarding definition.

            leaf icmpBroadcast  {
                type  cml_data_types:CML_BOOL_T;  
            } // END of icmpBroadcast definition.

            leaf hardwareProfilePortMode  {
                if-feature feature_list:HAVE_FLEXPORT;
                type  cml_data_types:CML_NSM_HARDWARE_PORTMODE_T;  
            } // END of hardwareProfilePortMode definition.

            leaf hardwareProfilePortModeBundle  {
                if-feature feature_list:HAVE_FLEXPORT;
                type  cml_data_types:CML_NSM_HARDWARE_PROFILE_PORTMODE_BUNDLE_T;  
            } // END of hardwareProfilePortModeBundle definition.


            list vrf {
                 
                description
                    "vrf";

                config true;
                key "vrfName";

                
                leaf vrfName  {
                    type  cml_data_types:CML_STRING_T {
                        length "0..255";
                    }
                } // END of vrfName definition.

                leaf ipVrfForwarding  {
                    type  cml_data_types:CML_BOOL_T;  
                } // END of ipVrfForwarding definition.

                leaf ipv6VrfForwarding  {
                    if-feature feature_list:HAVE_IPV6;
                    type  cml_data_types:CML_BOOL_T;  
                } // END of ipv6VrfForwarding definition.

                leaf icmpVrfBroadcast  {
                    type  cml_data_types:CML_BOOL_T;  
                } // END of icmpVrfBroadcast definition.

            } // End of vrf-list
            container srNsm {
                if-feature feature_list:HAVE_SR;
                                config true;

                description
                    "srNsm";

                leaf baseSid  {
                    type  cml_data_types:CML_UINT32_T {
                         range "16000..23999";
                    }
                } // END of baseSid definition.

                leaf last  {
                    type  cml_data_types:CML_UINT32_T {
                         range "16000..23999";
                    }
                } // END of last definition.

            } // END of srNsm-container definition.
            container errdisable {
                                config true;

                description
                    "Error Disable Configuration";

                leaf errdisableReason  {
                    type  cml_data_types:CML_NSM_ERR_REASON_T;  
                } // END of errdisableReason definition.

                leaf errdisableTimeout  {
                    type  cml_data_types:CML_NSM_ERR_DISABLE_TIMEOUT_T;  
                } // END of errdisableTimeout definition.

                leaf errdisableTimeoutInterval  {
                    type  cml_data_types:CML_UINT32_T {
                         range "10..1000000";
                    }
                } // END of errdisableTimeoutInterval definition.

            } // END of errdisable-container definition.
            container arpEntry {
                                config true;

                description
                    "arpEntry";


                list staticArpList {
                     
                    description
                        "staticArpList";

                    config true;
                    key "arpAddr";

                    
                    leaf arpAddr  {
                        type  cml_data_types:CML_STRING_T {
                            length "0..255";
                        }
                    } // END of arpAddr definition.

                    leaf macAddr  {
                        mandatory true;
                        type  cml_data_types:CML_STRING_T {
                            length "0..255";
                        }
                    } // END of macAddr definition.

                    leaf isArpProxy  {
                        mandatory true;
                        type  cml_data_types:CML_BOOL_T;  
                    } // END of isArpProxy definition.

                } // End of staticArpList-list

                list ipv6StaticNbrTable {
                                         if-feature feature_list:HAVE_L3;
                    if-feature feature_list:HAVE_IPV6;

                    description
                        "ipv6StaticNbrTable";

                    config true;
                    key "nbrAddr";

                    
                    leaf nbrAddr  {
                        type  cml_data_types:CML_STRING_T {
                            length "0..255";
                        }
                    } // END of nbrAddr definition.

                    leaf ifName  {
                        mandatory true;
                        type  cml_data_types:CML_STRING_T {
                            length "0..255";
                        }
                    } // END of ifName definition.

                    leaf macAddr  {
                        mandatory true;
                        type  cml_data_types:CML_STRING_T {
                            length "0..255";
                        }
                    } // END of macAddr definition.

                } // End of ipv6StaticNbrTable-list
            } // END of arpEntry-container definition.
            container load-balance {
                if-feature feature_list:HAVE_BROADCOM;
                                config true;

                description
                    "Load Balancing";

                leaf loadBalance  {
                    type  cml_data_types:CML_BOOL_T;  
                } // END of loadBalance definition.

                container l2 {
                    if-feature feature_list:HAVE_L2;
                                        config true;

                    description
                        "Load balancing on L2 packet";

                    leaf l2destMac  {
                        type  cml_data_types:CML_BOOL_T;  
                    } // END of l2destMac definition.

                    leaf l2srcMac  {
                        type  cml_data_types:CML_BOOL_T;  
                    } // END of l2srcMac definition.

                    leaf l2etherType  {
                        type  cml_data_types:CML_BOOL_T;  
                    } // END of l2etherType definition.

                    leaf l2vlan  {
                        type  cml_data_types:CML_BOOL_T;  
                    } // END of l2vlan definition.

                } // END of l2-container definition.
                container l3Ipv4 {
                    if-feature feature_list:HAVE_L3;
                                        config true;

                    description
                        "Load balancing on L2 packet";

                    leaf l3srcIpv4  {
                        type  cml_data_types:CML_BOOL_T;  
                    } // END of l3srcIpv4 definition.

                    leaf l3destIpv4  {
                        type  cml_data_types:CML_BOOL_T;  
                    } // END of l3destIpv4 definition.

                    leaf l3srcl4Port  {
                        type  cml_data_types:CML_BOOL_T;  
                    } // END of l3srcl4Port definition.

                    leaf l3destl4Port  {
                        type  cml_data_types:CML_BOOL_T;  
                    } // END of l3destl4Port definition.

                    leaf l3protocolId  {
                        type  cml_data_types:CML_BOOL_T;  
                    } // END of l3protocolId definition.

                } // END of l3Ipv4-container definition.
                container l3Ipv6 {
                    if-feature feature_list:HAVE_L3;
                                        config true;

                    description
                        "Load balancing on L2 packet";

                    leaf l3srcIpv6  {
                        type  cml_data_types:CML_BOOL_T;  
                    } // END of l3srcIpv6 definition.

                    leaf l3destIpv6  {
                        type  cml_data_types:CML_BOOL_T;  
                    } // END of l3destIpv6 definition.

                    leaf l3srcl4Port  {
                        type  cml_data_types:CML_BOOL_T;  
                    } // END of l3srcl4Port definition.

                    leaf l3destl4Port  {
                        type  cml_data_types:CML_BOOL_T;  
                    } // END of l3destl4Port definition.

                    leaf l3nextHdr  {
                        type  cml_data_types:CML_BOOL_T;  
                    } // END of l3nextHdr definition.

                } // END of l3Ipv6-container definition.
                container tunnel {
                    if-feature feature_list:HAVE_L3;
                                        config true;

                    description
                        "Load balancing on L2 packet";

                    leaf outerl3Header  {
                        type  cml_data_types:CML_BOOL_T;  
                    } // END of outerl3Header definition.

                } // END of tunnel-container definition.
                container trill {
                    if-feature feature_list:HAVE_TRILLD;
                                        config true;

                    description
                        "Load balancing on L2 packet";

                    leaf trill  {
                        type  cml_data_types:CML_NSM_LOAD_TRILL_T;  
                    } // END of trill definition.

                } // END of trill-container definition.
                container vxlan {
                    if-feature feature_list:HAVE_VXLAN;
                                        config true;

                    description
                        "Load balancing on L2 packet";

                    leaf innerL2  {
                        type  cml_data_types:CML_BOOL_T;  
                    } // END of innerL2 definition.

                    leaf innerL3  {
                        type  cml_data_types:CML_BOOL_T;  
                    } // END of innerL3 definition.

                } // END of vxlan-container definition.
                container mpls-ler-l2 {
                    if-feature feature_list:HAVE_MPLS;
                                        config true;

                    description
                        "Load balancing on L2 packet";

                    leaf mplsdestMac  {
                        type  cml_data_types:CML_BOOL_T;  
                    } // END of mplsdestMac definition.

                    leaf mplssrcMac  {
                        type  cml_data_types:CML_BOOL_T;  
                    } // END of mplssrcMac definition.

                    leaf mplsetherType  {
                        type  cml_data_types:CML_BOOL_T;  
                    } // END of mplsetherType definition.

                    leaf mplsvlan  {
                        type  cml_data_types:CML_BOOL_T;  
                    } // END of mplsvlan definition.

                } // END of mpls-ler-l2-container definition.
                container mpls-ler {
                    if-feature feature_list:HAVE_MPLS;
                                        config true;

                    description
                        "Load balancing on L2 packet";

                    leaf mplssrcIpv6  {
                        type  cml_data_types:CML_BOOL_T;  
                    } // END of mplssrcIpv6 definition.

                    leaf mplsdestIpv6  {
                        type  cml_data_types:CML_BOOL_T;  
                    } // END of mplsdestIpv6 definition.

                    leaf mplssrcl4Port  {
                        type  cml_data_types:CML_BOOL_T;  
                    } // END of mplssrcl4Port definition.

                    leaf mplsdestl4Port  {
                        type  cml_data_types:CML_BOOL_T;  
                    } // END of mplsdestl4Port definition.

                    leaf mplsprotocolId  {
                        type  cml_data_types:CML_BOOL_T;  
                    } // END of mplsprotocolId definition.

                } // END of mpls-ler-container definition.
            } // END of load-balance-container definition.
        } // End of nsmMaster-list
    } // END of nsmMaster-grouping definition.


}