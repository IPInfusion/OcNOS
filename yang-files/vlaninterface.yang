/*
* Copyright (C) 2016 IP Infusion, Inc. 
*  All Rights Reserved.
*
*** Auto generated by zebmdc

* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.

* File name : vlaninterface.yang
*
*/

submodule vlaninterface {

    belongs-to  ZebOS { prefix ZebOS; }
    include interface;
    include vlan;
    include bridge;


    import cml_data_types {
        prefix cml_data_types;
    }


    revision "2016-10-20" {
        description "Revisied on 2016-10-20.";    }



    grouping vlaninterface-grouping {
        list vlaninterface {
             
            description
                "vlaninterface";

            config true;
            key "ifName";

            
            leaf vrId  {
                type  cml_data_types:CML_INT32_T;  
                default "0";
                config true;
            } // END of vrId definition.

            leaf ifName  {
                type  cml_data_types:CML_STRING_T;  
                config true;
                description "switchport mode";
            } // END of ifName definition.

            leaf vlanPortMode  {
                mandatory true;
                type  cml_data_types:CML_VLAN_PORT_MODE_T;  
                config true;
            } // END of vlanPortMode definition.

            leaf vlanPortIngressFilter  {
                type  cml_data_types:CML_ENABLE_DISABLE_T;  
                default "enable";
                config true;
                description "switchport mode hybrid ingress-filter";
            } // END of vlanPortIngressFilter definition.

            leaf frameType  {
                type  cml_data_types:CML_VLAN_FRAME_TYPE_T;  
                default "all";
                config true;
                description "switchport mode hybrid acceptable-frame-type";
            } // END of frameType definition.


            list staticMac {
                 
                description
                    "staticMac";

                config true;
                key "macAddr";

                
                leaf vlanIdMac  {
                    type  cml_data_types:CML_UINT16_T {
                         range "2..4096";
                    }
                    config true;
                } // END of vlanIdMac definition.

                leaf bridgeId  {
                    type  cml_data_types:CML_STRING_T {
                        length "1..32";
                    }
                    config true;
                    description "mac Address";
                } // END of bridgeId definition.

                leaf macAddr  {
                    type  cml_data_types:CML_STRING_T;  
                    config true;
                    description "mac Address";
                } // END of macAddr definition.

                leaf discardForward  {
                    type  cml_data_types:CML_DISCARDFORWARD_T;  
                    config true;
                } // END of discardForward definition.

                leaf priorityOverWrite  {
                    type  cml_data_types:CML_UINT8_T {
                         range "0..7";
                    }
                    config true;
                } // END of priorityOverWrite definition.

                leaf overMacType  {
                    type  cml_data_types:CML_OVERMACTYPE_T;  
                    config true;
                } // END of overMacType definition.

            } // End of staticMac-list

            list vlanInterfaceBound {
                 
                description
                    "vlanInterfaceBound";

                config true;
                key "vlanId";

                
                leaf vlanId  {
                    type  cml_data_types:CML_UINT16_T;  
                    config true;
                    description "switchport (access|hybrid|native trunk)";
                } // END of vlanId definition.

                leaf vlanPortMode  {
                    mandatory true;
                    type  cml_data_types:CML_VLAN_PORT_MODE_T;  
                    config true;
                } // END of vlanPortMode definition.

            } // End of vlanInterfaceBound-list

            list allowedvlan {
                 
                description
                    "allowedvlan";

                config true;
                key "allowedVlanId";

                
                leaf allowedVlanId  {
                    type  cml_data_types:CML_UINT16_T;  
                    config true;
                    description "switchport allowed (hybrid|trunk)";
                } // END of allowedVlanId definition.

                leaf vlanPortMode  {
                    mandatory true;
                    type  cml_data_types:CML_VLAN_PORT_MODE_T;  
                    config true;
                } // END of vlanPortMode definition.

                leaf egrType  {
                    type  cml_data_types:CML_ENABLE_DISABLE_T;  
                    config true;
                } // END of egrType definition.

            } // End of allowedvlan-list

            list excludevlan {
                 
                description
                    "excludevlan";

                config true;
                key "excludeVlanId";

                
                leaf excludeVlanId  {
                    type  cml_data_types:CML_UINT16_T;  
                    config true;
                } // END of excludeVlanId definition.

                leaf vlanPortMode  {
                    mandatory true;
                    type  cml_data_types:CML_VLAN_PORT_MODE_T;  
                    config true;
                } // END of vlanPortMode definition.

            } // End of excludevlan-list

            list vlanUserTable {
                 
                description
                    "vlanUserTable";

                config true;
                key "userPriority";

                
                leaf userPriority  {
                    type  cml_data_types:CML_UINT8_T {
                         range "0..7";
                    }
                    config true;
                } // END of userPriority definition.

                leaf regenPriority  {
                    mandatory true;
                    type  cml_data_types:CML_UINT8_T {
                         range "0..7";
                    }
                    config true;
                } // END of regenPriority definition.

            } // End of vlanUserTable-list

            list vlanTraffic {
                 
                description
                    "vlanTraffic";

                config true;
                key "userPriority";

                
                leaf userPriority  {
                    type  cml_data_types:CML_UINT8_T {
                         range "0..7";
                    }
                    config true;
                } // END of userPriority definition.

                leaf trafficClass  {
                    type  cml_data_types:CML_UINT8_T {
                         range "1..8";
                    }
                    config true;
                } // END of trafficClass definition.

                leaf trafficClassValue  {
                    mandatory true;
                    type  cml_data_types:CML_UINT8_T {
                         range "0..7";
                    }
                    config true;
                } // END of trafficClassValue definition.

            } // End of vlanTraffic-list
        } // End of vlaninterface-list
    } // END of vlaninterface-grouping definition.


}