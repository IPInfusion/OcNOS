/*
* Copyright (C) 2019 IP Infusion, Inc.
*  All Rights Reserved.
*
*** Auto generated by zebmdc

* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.

* File name : ipi-bridge-domain.yang
*
*/

module ipi-bridge-domain {

    yang-version 1.1;

    namespace   "http://www.ipinfusion.com/yang/ocnos/ipi-bridge-domain";

    prefix "ipi-bridge-domain";

    import cml-data-types {
        prefix cml-data-types;
        revision-date 2023-08-10;
    }

    import ipi-network-instance {
        prefix ipi-network-instance;
        revision-date 2023-07-13;
    }

    import ipi-interface {
        prefix ipi-interface;
        revision-date 2023-10-13;
    }

    import feature-list {
        prefix feature-list;
        revision-date 2023-12-22;
    }

    organization
        "IP Infusion Inc.";

    contact
        "Address: 3965 Freedom Circle, Suite 200, Santa Clara, CA 95054
         Phone: +1 408-400-1900
         E-mail: support@ipinfusion.com
         Web: http://www.ipinfusion.com/";

    description
        "Bridge-domain configurations";


    revision "2023-10-20" {
        description "Changed member-interfaces nodes from leaf-list to list to ease dependency validations";
        reference " 0.2.1.";
    }

    revision "2023-09-26" {
        description "Added missing dependent objects for bridge-domain CLI with encap";
        reference " 0.1.5.";
    }

    revision "2023-07-19" {
        description "Added fix for removing subif from bridge-domain when encap is removed";
        reference " 0.1.4.";
    }

    revision "2023-07-13" {
        description "Added ifndef HAVE_SWFWDR flag to enable bridge-domain only for boards";
        reference " 0.1.3.";
    }

    revision "2023-05-29" {
        description "Added support for BVI interface mapping with bridge-domain";
        reference " 0.1.2.";
    }

    revision "2023-04-25" {
        description "Fixed clear mac address dynamic bridge-domain id cli issue";
        reference " 0.1.1.";
    }

    revision "2023-03-14" {
        description "It was moved from interfaces extended datamodel to network-instances datamodel.";
        reference " 0.1.0.";
    }

    grouping bridge-domain-interface-config {
        description
            "Grouping for Bridge-Domain interface configuration";
        leaf name  {
            type  leafref {
                path  "/ipi-interface:interfaces/ipi-interface:interface/ipi-interface:name";
            }
            description "This attribute specifies the subif for bridge-domain";
        } // END of name definition.

    } // END of bridge-domain-interface-config definition.
    grouping bridge-domain-interface-top {
        description
            "Grouping for Bridge-Domain interface";
        container member-interfaces {
            description
                "Container for Bridge-Domain interfaces";

            list member-interface {
                key "name";
                description
                    "List of Bridge-Domain interfaces";
                leaf name  {
                    type  leafref {
                        path  "../config/name";
                    }
                    description "This attribute specifies the subif for bridge-domain";
                } // END of name definition.

                container config {
                    description
                        "Configuration data for Bridge-Domain interface";
                    uses bridge-domain-interface-config;
                } // END of config-container definition.
                container state {
                    config false;
                    description
                        "Operational state data for Bridge-Domain interface";
                    uses bridge-domain-interface-config;
                } // END of state-container definition.
            } // End of member-interface-list
        } // END of member-interfaces-container definition.
    } // END of bridge-domain-interface-top definition.
    grouping subif-bridge-config {
        description
            "Grouping for Sub-interface bridge-domain configurations";
        leaf domain-id  {
            type  leafref {
                path  "/ipi-network-instance:network-instances/ipi-network-instance:network-instance/ipi-network-instance:instance-name";
            }
            description "This attribute specifies the bridge domain id.";
        } // END of domain-id definition.

        leaf description  {
            type  cml-data-types:cml_line_t {
                length "1..1965";
            }
            description "This attribute secifies the description for bridge domain";
        } // END of description definition.

        leaf route-interface  {
            type  leafref {
                path  "/ipi-interface:interfaces/ipi-interface:interface/ipi-interface:name";
            }
            description "This attribute specifies the Logical L3 BVI interface for
                        bridge-domain";
        } // END of route-interface definition.

    } // END of subif-bridge-config definition.
    grouping subif-bridge-instance-config {
        description
            "Grouping for Sub-interface bridge-domain configurations";
        leaf instance-id  {
            type  uint8 {
                 range "1..63"  {
                    description "1..63: Supported range 1 - 63";
                 }
            }
            mandatory true;
            description "Value of instance id";
        } // END of instance-id definition.

        leaf bridge-id  {
            type  string {
                length "1..1965";
                pattern "[^?' =,>|]+";
            }
            mandatory true;
            description "Map bridge mst instance to bridge-domain";
        } // END of bridge-id definition.

    } // END of subif-bridge-instance-config definition.

    grouping  bridge-domain-grouping {
    description
        "Global container for bridge domain";
    container bridge-domain {
        if-feature feature-list:HAVE_SUBINTERFACE;
        if-feature feature-list:NOT_HAVE_SWFWDR;
        if-feature feature-list:NOT_HAVE_SWFWDR;
        description
            "Global container for bridge domain";
        container config {
            description
                "Global configuration for bridge-domain";
            uses subif-bridge-config;
        } // END of config-container definition.
        container bridge-instance {
            description
                "Global configuration for bridge-domain";
            container config {
                presence "MST instance for bridge-domain";
                description
                    "Configuration for bridge-instance";
                uses subif-bridge-instance-config;
            } // END of config-container definition.
            container state {
                config false;
                description
                    "State data for bridge-domain bridge instance";
                uses subif-bridge-instance-config;
            } // END of state-container definition.
        } // END of bridge-instance-container definition.
        container state {
            config false;
            description
                "State data for bridge-domain";
            uses subif-bridge-config;
        } // END of state-container definition.
        uses bridge-domain-interface-top;
    } // END of bridge-domain-container definition.
    } // END of bridge-domain-grouping definition.

    augment /ipi-network-instance:network-instances/ipi-network-instance:network-instance {
    when " /ipi-network-instance:network-instances/ipi-network-instance:network-instance/ipi-network-instance:instance-type = 'bridge-domain' ";
    // when " ipi-bridge-domain:bridge-domain/config ";
        description
            "Global container for bridge domain";
        uses bridge-domain-grouping;
    }


}