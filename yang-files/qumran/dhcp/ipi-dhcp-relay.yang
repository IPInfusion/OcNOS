/*
* Copyright (C) 2019 IP Infusion, Inc.
*  All Rights Reserved.
*
*** Auto generated by zebmdc

* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.

* File name : ipi-dhcp-relay.yang
*
*/

submodule ipi-dhcp-relay {

    yang-version 1.1;

    belongs-to  ipi-dhcp { prefix ipi-dhcp; }

    import feature-list {
        prefix feature-list;
    }

    import ipi-dhcp-relay-types {
        prefix ipi-dhcp-relay-types;
    }

    import ietf-inet-types {
        prefix inet;
    }

    import ipi-interface {
        prefix ipi-interface;
    }

    import ipi-network-instance {
        prefix ipi-network-instance;
    }

    import ipi-vrf {
        prefix ipi-vrf;
    }

    organization
        "IP Infusion Inc.";

    contact
        "Address: 3965 Freedom Circle, Suite 200, Santa Clara, CA 95054
         Phone: +1 408-400-1900
         E-mail: support@ipinfusion.com
         Web: http://www.ipinfusion.com/";

    description
        "dhcp_relay_configuration";


    revision "2020-12-15" {
        description "Change to have data-types in lower case instead of camel case";
        reference " 0.2.0.";
    }

    revision "2020-08-11" {
        description "Initial Version";
        reference " 0.1.0.";
    }

    grouping relay-global-config {
        description
            "DHCP relay global configuration data attributes group";
        leaf enable-dhcpv4-relay  {
            type  empty;
            description "Use this attribute to enable the DHCP relay agent.";
        } // END of enable-dhcpv4-relay definition.

        leaf enable-dhcpv6-relay  {
            type  empty;
            description "Use this attribute to enable the DHCP relay agent.";
        } // END of enable-dhcpv6-relay definition.

    } // END of relay-global-config definition.
    grouping relay-global-vrf-config {
        description
            "DHCP relay VRF level information grouping";
        leaf link-selection-source-ip  {
            type  inet:ipv4-address;
            description "Enable link selection sub-option (5) in the option-82 in DHCP packet";
        } // END of link-selection-source-ip definition.

        leaf enable-option82  {
            type  empty;
            description "Enable the device to insert and remove option-82 information on DHCP
                        packets forwarded by the DHCP relay agent.";
        } // END of enable-option82 definition.

        leaf-list dhcpv4-server-address  {
            type  inet:ipv4-address;
            description "IPv4 address of the DHCP server";
        } // END of dhcpv4-server-address definition.

        leaf-list dhcpv6-server-address  {
            if-feature feature-list:HAVE_IPV6;
            type  inet:ipv6-address;
            description "IPv6 address of a DHCP server";
        } // END of dhcpv6-server-address definition.

        leaf remote-id  {
            when " /dhcp/relay/relay-agent/config/enable-option82 ";
            type  ipi-dhcp-relay-types:dhcp_remote_id_t;
            description "Remote host identifier. Use option 82 to provide the DHCP server
                        information about the DHCP client";
        } // END of remote-id definition.

    } // END of relay-global-vrf-config definition.
    grouping relay-interface-config {
        description
            "Configuration data for dhcp-relay on each interface";
        leaf ipv4-relay-interface  {
            when " not(/dhcp/relay/interfaces/interface/config/ipv4-uplink-interface) ";
            type  empty;
            description "Enable relay on Client facing interface";
        } // END of ipv4-relay-interface definition.

        leaf ipv4-uplink-interface  {
            when " not(/dhcp/relay/interfaces/interface/config/ipv4-relay-interface) ";
            type  empty;
            description "Specify the interface as an uplink interface(Server facing)";
        } // END of ipv4-uplink-interface definition.

        leaf ipv6-relay-interface  {
            when " not(/dhcp/relay/interfaces/interface/config/ipv6-uplink-interface) ";
            if-feature feature-list:HAVE_IPV6;
            type  empty;
            description "Enable IPv6 relay on Client facing interface";
        } // END of ipv6-relay-interface definition.

        leaf ipv6-uplink-interface  {
            when " not(/dhcp/relay/interfaces/interface/config/ipv6-relay-interface) ";
            if-feature feature-list:HAVE_IPV6;
            type  empty;
            description "Specify the interface as an uplink interface(Server facing)";
        } // END of ipv6-uplink-interface definition.

    } // END of relay-interface-config definition.
    grouping relay-interface-top {
        description
            "DHCP relay interface level information grouping";
        container interfaces {
            description
                "Top level container for dhcp-client on each interface";

            list interface {
            // when " !ipi-if-aggregate:member-aggregation ";
                key "name";
                description
                    "List of interfaces mapped with dhcp-client";
                leaf name  {
                    type  leafref {
                        path  "/ipi-interface:interfaces/ipi-interface:interface/ipi-interface:name";
                    }
                    description "The textual name of the interface. The value of this object should be
                                the name of the interface as assigned by the local device and should
                                be suitable for use in commands entered at the device's `console'.
                                This might be a text name, such as `le0' or a simple port number, such
                                as `1', depending on the interface naming syntax of the device. If
                                several entries in the ifTable together represent a single interface
                                as named by the device, then each will have the same value of name.
                                Note that for an agent which responds to SNMP queries concerning an
                                interface on some other (proxied) device, then the value of name for
                                such an interface is the proxied device's local name for it. If there
                                is no local name, or this object is otherwise not applicable, then
                                this object contains a zero-length string.";
                } // END of name definition.

                container config {
                    description
                        "Configuration data for dhcp-relay on each interface";
                    uses relay-interface-config;
                } // END of config-container definition.
                container state {
                    config false;
                    description
                        "Operational state data";
                    uses relay-interface-config;
                } // END of state-container definition.
            } // End of interface-list
        } // END of interfaces-container definition.
    } // END of relay-interface-top definition.
    grouping relay-global-top {
        description
            "DHCP relay global level information grouping";

        list relay-agent {
            key "vrf-name";
            description
                "List of Virtual Routing and Forwarding instances on the router";
            leaf vrf-name  {
                type  leafref {
                    path  "/ipi-network-instance:network-instances/ipi-network-instance:network-instance/ipi-vrf:vrf/ipi-vrf:config/ipi-vrf:vrf-name";
                }
                description "VPN routing/forwarding Instance name";
            } // END of vrf-name definition.

            container config {
                description
                    "Configuration parameters relating to a VRF instance";
                uses relay-global-vrf-config;
            } // END of config-container definition.
            container state {
                config false;
                description
                    "Operational state data";
                uses relay-global-vrf-config;
            } // END of state-container definition.
        } // End of relay-agent-list
        container global {
            description
                "DHCP relay global level information";
            container config {
                description
                    "Configuration data for DHCP relay global level";
                uses relay-global-config;
            } // END of config-container definition.
            container state {
                config false;
                description
                    "Operational state data";
                uses relay-global-config;
            } // END of state-container definition.
        } // END of global-container definition.
    } // END of relay-global-top definition.

    grouping  relay-grouping {
    description
        "DHCP relay related operations";
    container relay {
        when " /dhcp/global/config/disable-dhcp-feature != 1 ";
        description
            "DHCP relay related operations";
        uses relay-global-top;
        uses relay-interface-top;
    } // END of relay-container definition.
    } // END of relay-grouping definition.


}