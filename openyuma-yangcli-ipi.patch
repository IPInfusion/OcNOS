diff --git a/netconf/src/agt/agt_val_parse.c b/netconf/src/agt/agt_val_parse.c
index 7956f0d..5820426 100644
--- a/netconf/src/agt/agt_val_parse.c
+++ b/netconf/src/agt/agt_val_parse.c
@@ -2589,7 +2589,7 @@ static status_t
                     ncx_data_class_t parentdc,
                     val_value_t  *retval)
 {
-    ncx_btype_t  btyp;
+    ncx_btype_t  btyp, local_btyp;
     status_t     res, res2, res3;
     boolean      nserr, errfromchild = FALSE;
 
@@ -2612,10 +2612,22 @@ static status_t
     /* parse the attributes, if any */
     res2 = parse_metadata_nc(scb, msg, obj, startnode, nserr, retval);
 
+    /* If leafref, set to EMPTY if referred attr is EMPTY.*/
+    local_btyp = btyp;
+    if (NCX_BT_LEAFREF == btyp)
+      {
+        typ_def_t *typdef = obj_get_typdef (obj);
+        if ((typdef)
+            && (NCX_BT_EMPTY == typ_get_basetype (typ_get_xref_typdef (typdef))))
+          {
+            local_btyp = NCX_BT_EMPTY;
+          }
+      }
+
     /* continue to parse the startnode depending on the base type 
      * to record as many errors as possible
      */
-    switch (btyp) {
+    switch (local_btyp) {
     case NCX_BT_ANY:
         res = parse_any_nc(scb, msg, startnode, parentdc, retval);
         break;
@@ -2638,7 +2650,7 @@ static status_t
     case NCX_BT_UINT64:
     case NCX_BT_DECIMAL64:
     case NCX_BT_FLOAT64:
-        res = parse_num_nc(scb, msg, obj, btyp, startnode, parentdc, retval);
+        res = parse_num_nc(scb, msg, obj, local_btyp, startnode, parentdc, retval);
         break;
     case NCX_BT_LEAFREF:
     case NCX_BT_STRING:
@@ -2646,7 +2658,7 @@ static status_t
     case NCX_BT_SLIST:
     case NCX_BT_BITS:
     case NCX_BT_INSTANCE_ID:
-        res = parse_string_nc(scb, msg, obj, btyp, startnode, parentdc, retval);
+        res = parse_string_nc(scb, msg, obj, local_btyp, startnode, parentdc, retval);
         break;
     case NCX_BT_IDREF:
         res = parse_idref_nc(scb, msg, obj, startnode, parentdc, retval);
diff --git a/netconf/src/ncx/ncxtypes.h b/netconf/src/ncx/ncxtypes.h
index 0cfc73d..f56cf95 100644
--- a/netconf/src/ncx/ncxtypes.h
+++ b/netconf/src/ncx/ncxtypes.h
@@ -554,6 +554,11 @@ typedef enum ncx_protocol_t_ {
     NCX_PROTO_NETCONF11       /* RFC xxxx base:1.1 */
 } ncx_protocol_t;
 
+typedef enum ncx_yang_version_t_ {
+    NCX_YANG_VERSION10,
+    NCX_YANG_VERSION11
+} ncx_yang_version_t;
+
 
 /* YANG feature entry */
 typedef struct ncx_feature_t_ {
@@ -640,7 +645,7 @@ typedef struct ncx_module_t_ {
     const xmlChar    *belongsver;    /* back ptr to mod ver */
 
     xmlns_id_t        nsid;            /* assigned by xmlns */
-    uint32            langver;
+    ncx_yang_version_t langver;
     boolean           ismod;     /* module/submodule keyword */
     boolean           stmtmode;       /* T: save yang_stmt_t */
     boolean           added;         /* T: don't free on err */
diff --git a/netconf/src/ncx/val.c b/netconf/src/ncx/val.c
index 8621c30..93ed3a2 100644
--- a/netconf/src/ncx/val.c
+++ b/netconf/src/ncx/val.c
@@ -509,7 +509,10 @@ static void
     case NCX_BT_STRING:
     case NCX_BT_INSTANCE_ID:
     case NCX_BT_LEAFREF:
-        ncx_clean_str(&val->v.str);
+        if (1 != ((uintptr_t)(val->v.str)))
+          {
+            ncx_clean_str(&val->v.str);
+          }
         break;
     case NCX_BT_IDREF:
         if (val->v.idref.name) {
@@ -2392,7 +2395,7 @@ status_t
      */
     while (identity && !found) {
         if (!xml_strcmp(ncx_get_modname(identity->tkerr.mod), 
-                        idref->modname) &&
+                        ncx_get_modname(idref->base->tkerr.mod)) &&
             !xml_strcmp(identity->name, idref->basename)) {
             found = TRUE;
         } else {
diff --git a/netconf/src/ncx/val_util.c b/netconf/src/ncx/val_util.c
index 377dcc2..74fe1bc 100644
--- a/netconf/src/ncx/val_util.c
+++ b/netconf/src/ncx/val_util.c
@@ -3410,6 +3410,7 @@ val_value_t *
             case NCX_BT_BINARY:
             case NCX_BT_BOOLEAN:
             case NCX_BT_ENUM:
+            case NCX_BT_EMPTY:
                 break;
             default:
                 realval = val_make_simval(realtypdef,
diff --git a/netconf/src/ncx/yang_obj.c b/netconf/src/ncx/yang_obj.c
index 9426dca..db2fca7 100644
--- a/netconf/src/ncx/yang_obj.c
+++ b/netconf/src/ncx/yang_obj.c
@@ -7454,7 +7454,7 @@ static status_t
                 continue;
             }
         
-            if (obj_is_mandatory(testobj)) {
+            if (testobj->tkerr.mod->langver == NCX_YANG_VERSION10 && obj_is_mandatory(testobj)) {
                 if (augextern) {
                     log_error("\nError: Mandatory object '%s' not allowed "
                               "in external augment statement",
@@ -9204,7 +9204,7 @@ static status_t
          * check uses and augment since they can have
          * their own when statements
          */
-        if (testobj->when && is_targetmod) {
+        if (!testobj->grp && testobj->when && is_targetmod) {
             res = resolve_when(mod, testobj->when, testobj);
             CHK_EXIT(res, retres);
         }
@@ -9215,7 +9215,7 @@ static status_t
         }
 #endif
         /* validate correct Xpath in must clauses */
-        if (is_targetmod) {
+        if (!testobj->grp && is_targetmod) {
             res = resolve_mustQ(tkc, mod, testobj);
             CHK_EXIT(res, retres);
         }
diff --git a/netconf/src/ncx/yang_parse.c b/netconf/src/ncx/yang_parse.c
index 3ff2443..fd8794c 100644
--- a/netconf/src/ncx/yang_parse.c
+++ b/netconf/src/ncx/yang_parse.c
@@ -236,11 +236,13 @@ static status_t
             if (res != NO_ERR) {
                 retres = res;
             } else {
-                if (xml_strcmp(TK_CUR_VAL(tkc), YANG_VERSION_STR)) {
+                if(0==xml_strcmp(TK_CUR_VAL(tkc), YANG_VERSION10_STR)) {
+                    mod->langver = NCX_YANG_VERSION10;
+                } else if(0==xml_strcmp(TK_CUR_VAL(tkc), YANG_VERSION11_STR)) {
+                    mod->langver = NCX_YANG_VERSION11;
+                } else {
                     retres = ERR_NCX_WRONG_VERSION;
                     ncx_print_errormsg(tkc, mod, retres);
-                } else if (!mod->langver) {
-                    mod->langver = YANG_VERSION_NUM;
                 }
             }
             if (str) {
@@ -1164,6 +1166,7 @@ static status_t
     const xmlChar *val;
     const char    *expstr;
     tk_type_t      tktyp;
+    xmlChar       *str;
     status_t       res, retres;
     boolean        done, ver;
 
@@ -1219,18 +1222,21 @@ static status_t
             ver = TRUE;
 
             /* get the version number */
-            res = ncx_consume_token(tkc, mod, TK_TT_STRING);
+            res = yang_consume_string(tkc, mod, &str);
+            m__free (str);
             if (res != NO_ERR) {
                 retres = res;
                 if (NEED_EXIT(res)) {
                     return res;
                 }
             } else {
-                if (xml_strcmp(TK_CUR_VAL(tkc), YANG_VERSION_STR)) {
+                if(0==xml_strcmp(TK_CUR_VAL(tkc), YANG_VERSION10_STR)) {
+                    mod->langver = NCX_YANG_VERSION10;
+                } else if(0==xml_strcmp(TK_CUR_VAL(tkc), YANG_VERSION11_STR)) {
+                    mod->langver = NCX_YANG_VERSION11;
+                } else {
                     retres = ERR_NCX_WRONG_VERSION;
                     ncx_print_errormsg(tkc, mod, retres);
-                } else {
-                    mod->langver = YANG_VERSION_NUM;
                 }
             }
 
@@ -3244,6 +3250,8 @@ static status_t
         switch (ptyp) {
         case YANG_PT_TOP:
             loaded = TRUE;
+            if (pcb->parsemode)
+              return NO_ERR;
             break;
         case YANG_PT_IMPORT:
             return NO_ERR;
diff --git a/netconf/src/ncx/yang_typ.c b/netconf/src/ncx/yang_typ.c
index 1a2991e..1f6a6db 100644
--- a/netconf/src/ncx/yang_typ.c
+++ b/netconf/src/ncx/yang_typ.c
@@ -3489,18 +3489,29 @@ static status_t
         case NCX_BT_IDREF:
             idref = typ_get_idref(typdef);
             if (idref) {
+                ncx_module_t *referer_mod;
                 testidentity = NULL;
+                if (!strcmp ((const char *)mod->name,
+                             (const char *)idref->modname))
+                  {
+                    referer_mod = mod;
+                  }
+                else
+                  {
+                    referer_mod = ncx_find_module (idref->modname, NULL);
+                    if (!referer_mod) referer_mod = mod;
+                  }
                 if (idref->baseprefix &&
                     xml_strcmp(idref->baseprefix, mod->prefix)) {
 
                     /* find the identity in another module */
-                    res = yang_find_imp_identity(pcb, tkc, mod, 
+                    res = yang_find_imp_identity(pcb, tkc, referer_mod, 
                                                  idref->baseprefix,
                                                  idref->basename, 
                                                  &typdef->tkerr,
                                                  &testidentity);
                 } else {
-                    testidentity = ncx_find_identity(mod, idref->basename, 
+                    testidentity = ncx_find_identity(referer_mod, idref->basename,
                                                      FALSE);
                     if (!testidentity) {
                         res = ERR_NCX_DEF_NOT_FOUND;
diff --git a/netconf/src/ncx/yangconst.h b/netconf/src/ncx/yangconst.h
index 27778f0..76a37b4 100644
--- a/netconf/src/ncx/yangconst.h
+++ b/netconf/src/ncx/yangconst.h
@@ -57,8 +57,8 @@ extern "C" {
 #define YIN_MODULE      (const xmlChar *)"yin"  /***  no mod ! ***/
 #define YIN_SUFFIX      (const xmlChar *)"yin"
 
-#define YANG_VERSION_STR          (const xmlChar *)"1"
-#define YANG_VERSION_NUM          1
+#define YANG_VERSION10_STR          (const xmlChar *)"1"
+#define YANG_VERSION11_STR          (const xmlChar *)"1.1"
 
 #define YANG_FILE_SEPCHAR         '@'
 
